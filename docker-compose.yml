version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantumoptim_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: quantumoptim
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_2024}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - quantumoptim_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d quantumoptim"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: quantumoptim_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quantumoptim_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quantumoptim_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-secure_password_2024}@postgres:5432/quantumoptim
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_2024}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - quantumoptim_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Optimization Jobs
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quantumoptim_celery_worker
    restart: unless-stopped
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=4
    depends_on:
      - redis
      - postgres
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-secure_password_2024}@postgres:5432/quantumoptim
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_2024}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_2024}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-secure_redis_2024}@redis:6379/2
    volumes:
      - ./backend:/app
      - worker_logs:/app/logs
    networks:
      - quantumoptim_network

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quantumoptim_celery_beat
    restart: unless-stopped
    command: celery -A app.workers.celery_app beat --loglevel=info
    depends_on:
      - redis
      - postgres
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-secure_password_2024}@postgres:5432/quantumoptim
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_2024}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_2024}@redis:6379/1
    volumes:
      - ./backend:/app
    networks:
      - quantumoptim_network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
        - REACT_APP_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
        - REACT_APP_ENVIRONMENT=production
    container_name: quantumoptim_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - quantumoptim_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: quantumoptim_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - quantumoptim_network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: quantumoptim_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - quantumoptim_network

  grafana:
    image: grafana/grafana:latest
    container_name: quantumoptim_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - quantumoptim_network

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: quantumoptim_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - quantumoptim_network

  promtail:
    image: grafana/promtail:latest
    container_name: quantumoptim_promtail
    restart: unless-stopped
    volumes:
      - ./infrastructure/monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - backend_logs:/var/log/backend
      - worker_logs:/var/log/workers
      - nginx_logs:/var/log/nginx
    command: -config.file=/etc/promtail/config.yml
    networks:
      - quantumoptim_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  worker_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  quantumoptim_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
